mixin anchored(tag, text)
  - var escapedText = text.toLowerCase().replace(/[^\w]+/g, "-")
  | <#{tag} class="headline-with-anchor">
  a.without-underline(name=escapedText href=("#" + escapedText))=text
  | </#{tag}>

mixin codeExample(runnable, id)
  .code-example(class={"has-run-button": runnable} data-example-id=id)
    if runnable
      button(data-run="inline") Run inline
      button(data-run="modal") Run as modal
    block

+anchored("h2", "How to use")

:marked
  Download the <a href="#">latest release</a> and add this to your page:

+codeExample!= require("./examples/install-web.md")
+codeExample(true)!= require("./examples/basic-web.md")

:marked
  You can use EmbedBox with bundlers like Webpack and Browserify too!

+codeExample!= require("./examples/install-node.md")
+codeExample()!= require("./examples/basic-node.md")

:marked
  >EmbedBox supports Chrome, Safari, Firefox, and IE10+!

+anchored("h3", "Targets")
:marked
  Targets are the instruction pages for each type of CMS.
  Targets will use broad “global” option unless a target specific “local” option is set.

:marked
  In this example all targets except Weebly will use the same `embedCode`.

+codeExample(true)!= require("./examples/advanced.md")

:marked
  >If your script should be loaded in the `<head>` tag,
  >set `insertInHead: true` and the instructions will update according.

+anchored("h4", "Miscellaneous")
:marked
  The target search screen can be skipped with `initialTarget`.

+codeExample(true)!= require("./examples/initial-target.md")

:marked
  >Configure <a href="#ordering" class="without-underline">`priority`</a>
  to disable the target search screen entirely.

:marked
  Targets are populated in the `EmbedBox.fetchedTargets` array.

  `EmbedBox.getTargetIDs()` can be used to programatically get the bundled target IDs if desired.

+codeExample(false, "target-ids")!= require("./examples/get-target-ids.md")

+anchored("h3", "Plugins")
:marked
  A `pluginURL` can be used for sending users CMS plugins.

+codeExample(true)!= require("./examples/plugin-url.md")

:marked
  >Plugins will automatically download when a target is selected.
  >
  >Set `autoDownload: false` to disable to this behavior.

+anchored("h4", "Compatibility")
:marked
  A target's support for local `embedCode` and `pluginURL` is dependant on it's internal `supports` property.

table#target-supports
  thead
    tr
      th.id ID
      th.embed-code <code>embedCode</code>
      th.plugin-url <code>pluginUrl</code>
  tbody

+anchored("h3", "Positioning")
:marked
  EmbedBox can appear inline by specifying `container` in the config.
  This can be a CSS selector.

+codeExample!= require("./examples/container-selector.md")

:marked
  ...or an HTML element.

+codeExample!= require("./examples/container-element.md")

+anchored("h3", "Lifecycle")
:marked
  EmbedBox will automatically appear on creation.
  This can be disabled with the `autoShow` option.

  Capturing the `new EmbedBox()` instance in a variable lets us call the lifecycle methods when needed.

+codeExample(true)!= require("./examples/auto-show.md")

+anchored("h3", "Events")
:marked
  While the EmbedBox constructor is synchronous, The browser will load the internal iframe asynchronously.

  The `onLoad` event will fire when ready.

+codeExample(true)!= require("./examples/events.md")

+anchored("h3", "Routing")
:marked
  EmbedBox will look at `#!/embed/:targetID` when created and route accordingly.

+codeExample(true)!= require("./examples/routing.md")

:marked
  This can be disbled with the `routing` option.

+codeExample(true)!= require("./examples/disabled-routing.md")

+anchored("h2", "Customization")
+anchored("h3", "Themes")
+codeExample(true)!= require("./examples/custom-theme.md")

:marked
  If the `theme` configuration option is too coarse,
  the EmbedBox stylesheet can be extended.

+codeExample(true)!= require("./examples/custom-stylesheet.md")

+anchored("h3", "Content slots")
:marked
  Content can be inserted before and after the target instructions.

  Target specific slots can be included as well.

+codeExample(true)!= require("./examples/content-slots.md")

+anchored("h3", "Labels")
:marked
  Labels can be added as strings or functions.
  The EmbedBox `config` is exposed to label functions.

+codeExample(true)!= require("./examples/labels.md")

+anchored("h3", "Ordering")
:marked
  Targets can be ordered with the `priority` option.
  A target will remain in the original order if not specified.

  Set `priority: -1` to disable a target entirely.

+codeExample(true)!= require("./examples/ordering.md")

:marked
  >The target selection screen will be skipped if only one target is visible.

+anchored("h3", "Custom targets")
:marked
  If the content slots are too coarse, custom targets can be created with the custom build.

+codeExample!= require("./examples/custom-install.md")

+codeExample(true)!= require("./examples/custom-target.md")

+anchored("h2", "Contributing")
:marked
  Please do, we would love for this to become a project of the community.
  Feel free to open an issue, submit a PR or contribute to the docs.

  Is there a CMS target that you'd like to see here?

  [Check out](https://github.com/EagerIO/EmbedBox/blob/master/docs/new-targets.md) how easy it is to add one!
